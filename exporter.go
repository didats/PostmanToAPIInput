package main

import (
	"regexp"
	"strings"
)

// SwiftExporter Type struct of the exporter
type SwiftExporter struct {
	result     string
	baseStruct string
	method     []string
	name       []string
	url        []string
	params     map[string][]string
	queries    map[string][]string
}

// NewSwiftExporter Create a struct with constructor
func NewSwiftExporter(content Postman, base string) SwiftExporter {
	start := "//\n//	APIInput.swift\n//	Generated by github.com/didats/PostmanToAPIInput\n"
	start += "//\n//	Created by Didats Triadi\n"
	start += "//	MIT License. Use with your own risk\n//\n\nimport Foundation\n\n"
	start += "public struct APIInput {\n"

	method := []string{}
	name := []string{}
	url := []string{}
	params := make(map[string][]string)
	queries := make(map[string][]string)

	for _, value := range content.Requests {
		name = append(name, value.Name)
		method = append(method, strings.Trim(value.Method, ""))
		url = append(url, value.URL)

		item := []string{}
		for _, dataValue := range value.Data {
			item = append(item, dataValue.Key)
		}
		params[value.Name] = item

		query := []string{}
		for _, queryValue := range value.QueryParams {
			key := queryValue.(map[string]interface{})
			query = append(query, key["key"].(string))
		}
		queries[value.Name] = query
	}

	return SwiftExporter{
		result:     start,
		baseStruct: base,
		name:       name,
		url:        url,
		method:     method,
		params:     params,
		queries:    queries,
	}
}

func (swift *SwiftExporter) addVariable(key string) {
	swift.result += "\t\tlet " + key + ": String?\n"
}

func (swift *SwiftExporter) addToJSON(keys []string) {
	swift.result += "\t\tpublic var toJSON: [String: String] {\n"
	swift.result += "\t\t\tvar json: [String: String] = [:]\n\n"

	for _, key := range keys {
		swift.addToJSONItem(key)
	}

	swift.result += "\n"
	swift.result += "\t\t\treturn json\n"
	swift.result += "\t\t}\n"
}

func (swift *SwiftExporter) addToJSONItem(key string) {
	swift.result += "\t\t\tif let " + key + " = self." + key + " {\n"
	swift.result += "\t\t\t\tjson[\"" + key + "\"] = " + key + "\n"
	swift.result += "\t\t\t}\n"
}

func (swift *SwiftExporter) addPath(path string, queries []string) {
	newPath := swift.formatPath(path)
	queryURL := swift.formatQueryURL(queries)
	swift.result += "\t\tpublic var path: String {\n"
	swift.result += "\t\t\treturn \"" + newPath + queryURL + "\"\n"
	swift.result += "\t\t}\n"
}

func (swift *SwiftExporter) addMethod(method string) {
	swift.result += "\t\tpublic var method: String {\n"
	swift.result += "\t\t\treturn \"" + method + "\"\n"
	swift.result += "\t\t}\n"
}

func (swift *SwiftExporter) formatQueryURL(keys []string) string {
	if len(keys) > 0 {
		urls := []string{}
		for _, key := range keys {
			urls = append(urls, key+"=\\("+key+")")
		}

		return "?" + strings.Join(urls, "&")
	}

	return ""
}

func (swift *SwiftExporter) formatPath(url string) string {
	comps := strings.Split(url, "/")
	if len(comps) > 0 {
		path := comps[len(comps)-1]
		reg, _ := regexp.Compile(`\?.{1,}`)
		return "/" + reg.ReplaceAllString(path, "")
	}

	return ""
}

func (swift *SwiftExporter) formatName(name string) string {
	str := strings.ReplaceAll(name, "_", " ")
	str = strings.Title(str)
	str = strings.ReplaceAll(str, " ", "")

	return str
}

func (swift *SwiftExporter) createRequest(requestName string, baseName string, params []string, queries []string, path string, method string) {
	base := ""
	if len(baseName) > 0 {
		base = ": " + baseName
	}

	swift.result += "\n"
	swift.result += "\tpublic struct " + swift.formatName(requestName) + base + " {\n"
	for _, key := range params {
		swift.addVariable(key)
	}

	for _, key := range queries {
		swift.addVariable(key)
	}

	swift.result += "\n"

	swift.addToJSON(params)
	swift.result += "\n"

	swift.addPath(path, queries)
	swift.result += "\n"

	swift.addMethod(method)
	swift.result += "\t}\n"
}

func (swift *SwiftExporter) fileContent() string {
	for index, value := range swift.name {
		params := swift.params[value]
		queries := swift.queries[value]

		swift.createRequest(value, swift.baseStruct, params, queries, swift.url[index], swift.method[index])
	}
	swift.result += "}"

	return swift.result
}
