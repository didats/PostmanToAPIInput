package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"regexp"
	"strings"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func getName(path string) string {
	str := strings.ReplaceAll(path, "_", " ")
	str = strings.Title(str)
	str = strings.ReplaceAll(str, " ", "")

	return str
}

func getPath(url string) string {
	comps := strings.Split(url, "/")
	if len(comps) > 0 {
		path := comps[len(comps)-1]
		reg, _ := regexp.Compile(`\?.{1,}`)
		return reg.ReplaceAllString(path, "")
	}

	return ""
}

func scanInput(question string) string {
	reader := bufio.NewReader(os.Stdin)
	fmt.Print(question + ":")
	text, _ := reader.ReadString('\n')

	return strings.ReplaceAll(text, "\n", "")
}

func toQueryString(data []string) (string, string) {
	if len(data) > 0 {
		queryString := []string{}
		queryURL := []string{}

		for _, queryData := range data {
			queryString = append(queryString, "let "+queryData+": String?")
			queryURL = append(queryURL, queryData+"=\\("+queryData+")")
		}

		dataQueryVar := strings.Join(queryString, "\n\t\t") + "\n\t\t"
		dataQueryURL := "?" + strings.Join(queryURL, "&")

		return dataQueryVar, dataQueryURL
	}

	return "", ""
}

func formatKey(key string) string {
	str := "\n\t\t\tif let " + key + " = self." + key + " {\n\t\t\t\t"
	str += "json[\"" + key + "\"] = " + key + "\n\t\t\t}"

	return str
}

func main() {
	//location := scanTextLocation()
	fileLocation := "/Users/didats/Downloads/CATERING.postman_collection.json"
	baseStruct := "APIDetail"

	//fileLocation := scanInput("Postman file path")

	file, err := ioutil.ReadFile(fileLocation)
	if err != nil {
		fmt.Println("Could not locate '"+fileLocation+"' to read", err)
		os.Exit(3)
	}

	//saveLocation := scanInput("Path to save the file")
	//baseStruct := scanInput("Base struct name")

	content := string(file)
	res := Postman{}
	json.Unmarshal([]byte(content), &res)

	swift := NewSwiftExporter(res, baseStruct)
	fmt.Println(swift.fileContent())

	// resultData := "//	APIInput\n"
	// resultData += "//	Generated by Didats Triadi\n"
	// resultData += "//	https://rimbunesia.com\n\n"

	// resultData += "public struct APIInput {\n\t"
	// for _, value := range res.Requests {
	// 	name := getName(getPath(value.URL))
	// 	url := "/" + getPath(value.URL)
	// 	method := value.Method

	// 	params := []string{}
	// 	vars := []string{}
	// 	for _, dataValue := range value.Data {
	// 		params = append(params, "let "+dataValue.Key+": String?\n\t\t")
	// 		vars = append(vars, formatKey(dataValue.Key))
	// 	}

	// 	if len(baseStruct) > 0 {
	// 		resultData += "public struct " + name + ": " + baseStruct + " {\n\t\t"
	// 	} else {
	// 		resultData += "public struct " + name + " {\n\t\t"
	// 	}

	// 	queryKeys := []string{}
	// 	for _, item := range value.QueryParams {
	// 		key := item.(map[string]interface{})
	// 		queryKeys = append(queryKeys, key["key"].(string))
	// 	}

	// 	queryVar, queryURL := toQueryString(queryKeys)

	// 	resultData += queryVar
	// 	resultData += strings.Join(params, "")

	// 	resultData += "\n\t\tvar toJSON: [String : String] {\n\t\t\t"
	// 	resultData += "var json: [String: String] = [:]\n\t\t\t"
	// 	resultData += strings.Join(vars, "")
	// 	resultData += "\n\t\t\treturn json\n\t\t}\n\n\t\t"

	// 	resultData += "var path: String {\n\t\t\treturn \"" + url + queryURL + "\"\n\t\t}"
	// 	resultData += "\n\n\t\tvar method: String {\n\t\t\treturn \"" + method + "\"\n\t\t"

	// 	resultData += "}\n\t}\n\n\t"
	// }
	// resultData += "\n}"

	// f, err := os.Create(saveLocation + "/APIInput.swift")
	// if err != nil {
	// 	fmt.Println("Could not open the file with error: ", err)
	// 	os.Exit(3)
	// }

	// f.WriteString(resultData)
	// f.Close()

	// fmt.Println("File saved to: " + saveLocation + "/APIInput.swift")
}
